-- VARIABLES
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Remotes = ReplicatedStorage:WaitForChild("Remotes")
local EquipHeroEquip = Remotes:WaitForChild("EquipHeroEquip")
local RandomHeroEquipGrade = Remotes:WaitForChild("RandomHeroEquipGrade")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

local lastGuid = nil
local spinning = false
local spinDelay = 0.05
local stopGrades = {}
local gradeMap = {
    [990006] = "S",
    [990007] = "SS",
    [990008] = "G",
    [990009] = "N",
    [990010] = "M"
}

-- FLUENT UI
local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local Window = Fluent:CreateWindow({
    Title = "üçë CUTE HXUB",
    SubTitle = "+1 Blade Slayer üçë",
    Size = UDim2.fromOffset(480,300),
    TabWidth = 160,
    Acrylic = true,
    Theme = "Dark"
})

local TabSpin = Window:AddTab({Title="Auto Spinner", Icon="refresh-cw"})

-- CAPTURE LAST EQUIPPED GUID
local oldNamecall
oldNamecall = hookmetamethod(game, "__namecall", function(self, ...)
    local args = {...}
    if getnamecallmethod() == "FireServer" and self == EquipHeroEquip then
        if args[1] and typeof(args[1]) == "table" and args[1].guid then
            lastGuid = args[1].guid
            Window:Notify({Title="Auto Spinner", Content="‚úÖ Captured last guid", Duration=2})
        end
    end
    return oldNamecall(self, ...)
end)

-- SPIN FUNCTION
local function spinOnce()
    if not lastGuid then
        Fluent:Notify({Title="Auto Spinner", Content="‚ùå Equip a weapon first!", Duration=2})
        return nil
    end
    local args = { { drawId = 980001, guid = lastGuid } }
    local success, result = pcall(function()
        return RandomHeroEquipGrade:InvokeServer(unpack(args))
    end)
    if success and typeof(result) == "table" and result.data then
        local gradeId = result.data.grade
        local gradeName = gradeMap[gradeId] or "Unknown"
        Window:Notify({Title="Auto Spinner", Content="üé≤ Spin result: "..gradeName, Duration=1})
        return gradeId
    else
        Fluent:Notify({Title="Auto Spinner", Content="‚ùå Spin failed", Duration=2})
        return nil
    end
end

-- STOP CHECKBOXES
for gradeId,name in pairs(gradeMap) do
    TabSpin:AddToggle("Stop_"..gradeId, {Title="Stop at "..name, Default=false}, function(val)
        stopGrades[gradeId] = val
    end)
end

-- SPIN SPEED
TabSpin:AddSlider("SpinDelay",{Title="Spin Delay",Min=0.001,Max=1,Default=0.05,Rounding=3},function(val)
    spinDelay = val
end)

-- START BUTTON
TabSpin:AddButton({Title="‚ñ∂Ô∏è Start Spin",Callback=function()
    if spinning then return end
    spinning = true
    Window:Notify({Title="Auto Spinner", Content="üöÄ Spin started!", Duration=2})
    while spinning do
        local gradeId = spinOnce()
        if gradeId and stopGrades[gradeId] then
            spinning = false
            Window:Notify({Title="Auto Spinner", Content="üéâ Found target grade: "..(gradeMap[gradeId] or "Unknown"), Duration=5})
            break
        end
        task.wait(spinDelay)
    end
end})

-- STOP BUTTON
TabSpin:AddButton({Title="‚õî Stop Spin",Callback=function()
    spinning = false
    Window:Notify({Title="Auto Spinner", Content="‚õî Spin stopped manually", Duration=2})
end})
