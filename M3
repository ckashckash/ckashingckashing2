-- // Variables
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Remotes = ReplicatedStorage:WaitForChild("Remotes")

local EquipHeroEquip = Remotes:WaitForChild("EquipHeroEquip")
local RandomHeroEquipGrade = Remotes:WaitForChild("RandomHeroEquipGrade")

local lastGuid = nil

-- Capture guid when equipping
local oldFire
oldFire = hookfunction(EquipHeroEquip.FireServer, function(self, ...)
    local args = {...}
    if args[1] and typeof(args[1]) == "table" and args[1].guid then
        lastGuid = args[1].guid
        print("✅ Captured last guid:", lastGuid)

        -- Auto test one spin when guid is captured
        task.delay(0.5, function()
            spinOnce()
        end)
    end
    return oldFire(self, ...)
end)

-- Spin function
function spinOnce()
    if not lastGuid then
        warn("❌ No guid captured yet. Equip a weapon first!")
        return
    end

    local args = {
        {
            drawId = 980001,
            guid = lastGuid
        }
    }

    local success, result = pcall(function()
        return RandomHeroEquipGrade:InvokeServer(unpack(args))
    end)

    if success then
        print("📜 Spin result raw:", result, typeof(result))
        if typeof(result) == "table" then
            for k,v in pairs(result) do
                print(" -", k, v)
                if typeof(v) == "table" then
                    for kk,vv in pairs(v) do
                        print("   >", kk, vv)
                    end
                end
            end
        end
    else
        warn("❌ Spin failed:", result)
    end
end
