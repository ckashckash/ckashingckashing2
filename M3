-- =========================
-- FLUENT HUB SETUP
-- =========================
local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({
    Title = "üçë CUTE HUB!!!!!!!!!!!!!!!!!! ",
    SubTitle = "+1 Blade Slayer üçë",
    TabWidth = 160,
    Size = UDim2.fromOffset(480, 300),
    Acrylic = true,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.K
})

-- =========================
-- VARIABLES
-- =========================
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Remotes = ReplicatedStorage:WaitForChild("Remotes")
local EquipHeroEquip = Remotes:WaitForChild("EquipHeroEquip")
local RandomHeroEquipGrade = Remotes:WaitForChild("RandomHeroEquipGrade")
local StarterGui = game:GetService("StarterGui")

local lastGuid = nil
local spinning = false
local spinDelay = 0.1
local stopGrades = {}

-- Map of grade IDs to names
local gradeMap = {
    [990006] = "S",
    [990007] = "SS",
    [990008] = "G",
    [990009] = "N",
    [990010] = "M"
}

-- =========================
-- CAPTURE LAST EQUIPPED GUID
-- =========================
local mt = getrawmetatable(game)
setreadonly(mt, false)
local oldNamecall = mt.__namecall

mt.__namecall = newcclosure(function(self, ...)
    local method = getnamecallmethod()
    local args = {...}

    if self == EquipHeroEquip and method == "FireServer" then
        if args[1] and typeof(args[1]) == "table" and args[1].guid then
            lastGuid = args[1].guid
            print("‚úÖ Captured new guid:", lastGuid)
        end
    end

    return oldNamecall(self, ...)
end)

setreadonly(mt, true)

-- =========================
-- SPIN FUNCTION
-- =========================
local function spinOnce()
    if not lastGuid then
        warn("‚ùå No guid captured yet. Equip a weapon first!")
        return
    end

    local args = { { drawId = 980001, guid = lastGuid } }

    local success, result = pcall(function()
        return RandomHeroEquipGrade:InvokeServer(unpack(args))
    end)

    if success and typeof(result) == "table" and result.data then
        local gradeId = result.data.grade
        local gradeName = gradeMap[gradeId] or ("Unknown grade: " .. tostring(gradeId))
        print("üé≤ Spin result:", gradeName)
        return gradeId
    else
        warn("‚ùå Spin failed:", result)
    end
end

-- =========================
-- FLUENT UI TAB
-- =========================
task.defer(function()
    local TabSpin = Window:AddTab({ Title = "Auto Spinner", Icon = "refresh-cw" })

    -- Toggles for stop grades
    for gradeId, name in pairs(gradeMap) do
        TabSpin:AddToggle("Stop_"..gradeId, {Title = "Stop at "..name, Default = false}, function(Value)
            stopGrades[gradeId] = Value
        end)
    end

    -- Slider for spin speed
    TabSpin:AddSlider("SpinDelay", {Title = "Spin Delay", Min = 0.001, Max = 1, Default = 0.1, Rounding = 3}, function(Value)
        spinDelay = Value
    end)

    -- Start Spin button
    TabSpin:AddButton({Title = "‚ñ∂Ô∏è Start Spin"}, function()
        if spinning then return end
        spinning = true
        task.spawn(function()
            while spinning do
                local gradeId = spinOnce()
                if gradeId and stopGrades[gradeId] then
                    spinning = false
                    Window:Notify({
                        Title = "Auto Spinner",
                        Content = "üéâ Found target: " .. (gradeMap[gradeId] or "Unknown"),
                        Duration = 5
                    })
                    break
                end
                task.wait(spinDelay)
            end
        end)
    end)

    -- Stop Spin button
    TabSpin:AddButton({Title = "‚õî Stop Spin"}, function()
        spinning = false
        Window:Notify({
            Title = "Auto Spinner",
            Content = "Stopped spinning manually.",
            Duration = 3
        })
    end)
end)
