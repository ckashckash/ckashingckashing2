-- ===========================
-- Load Fluent & Addons
-- ===========================
local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({
    Title = "üçë CUTE HUB ",
    SubTitle = "+1 Blade Slayer üçë",
    TabWidth = 160,
    Size = UDim2.fromOffset(480, 300),
    Acrylic = true,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.K
})

local Options = Fluent.Options

-- ===========================
-- Welcome Tab
-- ===========================
local Tabs = {}
Tabs.Welcome = Window:AddTab({ Title = "Welcome", Icon = "smile" })

Tabs.Welcome:AddParagraph({
    Title = "üçë Cute Hub ‚ú®",
    Content = [[

Welcome to üå∏ Cute Hub üå∏


üíñ Features:
‚Ä¢ üñ±Ô∏è Auto Click
‚Ä¢ üß≤ Auto Collect Drop
‚Ä¢ ‚öîÔ∏è Kill Aura
‚Ä¢ üè∞ Auto Dungeon
‚Ä¢ üí∞ Auto Fuse Gem 1-12
‚Ä¢ üê¥ Use All Mounts
‚Ä¢ üîß Auto Fuse Weapon
‚Ä¢ üóëÔ∏è Auto Delete Weapon
‚Ä¢ üîÅ Auto Reborn
‚Ä¢ üí§ Anti AFK
‚Ä¢ üéÅ And so much more~!

Just sit back, relax, and let the cuteness carry you to victory~ üåü

]]
})

Tabs.Welcome:AddButton({
    Title = "Discord",
    Description = "Click to copy the Discord invite link.",
    Callback = function()
        if setclipboard then
            setclipboard("https://discord.gg/pazV3CdReC")
            print("Discord link copied to clipboard!")
        else
            warn("Clipboard function not available.")
        end
    end
})

-- ===========================
-- Services / Remotes
-- ===========================
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local DrawWeaponQuirk = ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("DrawWeaponQuirk")
local EquipWeapon = ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("EquipWeapon")
local RandomHeroEquipGrade = ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("RandomHeroEquipGrade")
local EquipHeroEquip = ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("EquipHeroEquip")

-- ===========================
-- Weapon Quirk Lists
-- ===========================
local weaponQuirksList1 = {
    ["Celestial Onslaught"] = 101013,
    ["Lucky Scavenger"] = 101014,
    ["Titan's Wrath"] = 101015,
    ["Omnipotent Benefactor"] = 101016,
    ["Archangel's Judgment"] = 101017,
    ["Avatar of Destruction"] = 101018
}

local weaponQuirksList2 = {
    ["Celestial Onslaught"] = 101031,
    ["Lucky Scavenger"] = 101032,
    ["Titan's Wrath"] = 101033,
    ["Omnipotent Benefactor"] = 101034,
    ["Archangel's Judgment"] = 101035,
    ["Avatar of Destruction"] = 101036
}

local weaponQuirkNames1 = {}
for name, id in pairs(weaponQuirksList1) do weaponQuirkNames1[id] = name end
local weaponQuirkNames2 = {}
for name, id in pairs(weaponQuirksList2) do weaponQuirkNames2[id] = name end

-- ===========================
-- Draw Tables for EquipWeapon Spin
-- ===========================
local drawTables = {
    [980001] = { [990006]="S", [990007]="SS", [990008]="G", [990009]="N", [990010]="M" },
    [980002] = { [990016]="S", [990017]="SS", [990018]="G", [990019]="N", [990020]="M" },
    [980003] = { [990026]="S", [990027]="SS", [990028]="G", [990029]="N", [990030]="M" },
}

-- ===========================
-- Weapon / Equip GUID tracking
-- ===========================
local weaponGuid = nil
local weaponGuidBySlot = {}
local equipGuid = nil

-- ===========================
-- Hook to capture equip GUIDs
-- ===========================
local oldNamecall
oldNamecall = hookmetamethod(game, "__namecall", function(self, ...)
    local method = getnamecallmethod()
    local args = {...}

    if method == "FireServer" and self == EquipWeapon then
        if args[1] and type(args[1]) == "string" then
            weaponGuid = args[1]
            if args[2] and type(args[2]) == "number" then
                weaponGuidBySlot[args[2]] = args[1]
            end
        end
    end

    if method == "FireServer" and self == EquipHeroEquip then
        if args[1] and type(args[1]) == "table" and args[1].guid then
            equipGuid = args[1].guid
        end
    end

    return oldNamecall(self, ...)
end)

-- ===========================
-- Utility function
-- ===========================
local function tableHasValue(tbl, val)
    for _, v in ipairs(tbl) do
        if tonumber(v) == tonumber(val) then
            return true
        end
    end
    return false
end

-- ===========================
-- Spinner Functions Slot 1 & 2
-- ===========================
local slotIndex1, spinning1, desiredWeaponQuirks1, spinDelay1 = 1, false, {}, 0.1
local slotIndex2, spinning2, desiredWeaponQuirks2, spinDelay2 = 2, false, {}, 0.1

local function spinLoop1()
    while spinning1 do
        local guid = weaponGuidBySlot[slotIndex1] or weaponGuid
        if not guid then
            Fluent:Notify({Title = "Error (Slot 1)", Content = "No weapon equipped in slot 1!", Duration = 3})
            spinning1 = false
            break
        end

        local result = DrawWeaponQuirk:InvokeServer({{slotIndex=slotIndex1, guid=guid}})
        if result and result.quirkId then
            local quirkName = weaponQuirkNames1[result.quirkId]
            if quirkName then
                Fluent:Notify({Title="Weapon Quirk Roll (Slot 1)", Content="Got quirk: "..quirkName, Duration=2})
                if tableHasValue(desiredWeaponQuirks1, result.quirkId) then
                    Fluent:Notify({Title="Success (Slot 1)", Content="üéØ Found desired quirk: "..quirkName, Duration=3})
                    spinning1 = false
                    break
                end
            end
        end
        task.wait(spinDelay1)
    end
end

local function spinLoop2()
    while spinning2 do
        local guid = weaponGuidBySlot[slotIndex2] or weaponGuid
        if not guid then
            Fluent:Notify({Title = "Error (Slot 2)", Content = "No weapon equipped in slot 2!", Duration = 3})
            spinning2 = false
            break
        end

        local result = DrawWeaponQuirk:InvokeServer({{slotIndex=slotIndex2, guid=guid}})
        if result and result.quirkId then
            local quirkName = weaponQuirkNames2[result.quirkId]
            if quirkName then
                Fluent:Notify({Title="Weapon Quirk Roll (Slot 2)", Content="Got quirk: "..quirkName, Duration=2})
                if tableHasValue(desiredWeaponQuirks2, result.quirkId) then
                    Fluent:Notify({Title="Success (Slot 2)", Content="üéØ Found desired quirk: "..quirkName, Duration=3})
                    spinning2 = false
                    break
                end
            end
        end
        task.wait(spinDelay2)
    end
end

-- ===========================
-- Spinner Function EquipWeapon Spin
-- ===========================
local spinning3, desiredWeaponQuirks3, spinDelay3 = false, {}, 0.1
local currentDrawId = 980001
local EquipQuirkNames = drawTables[currentDrawId]
local spinToggles = {} -- table to track toggles for refreshing

local function spinLoop3()
    while spinning3 do
        if not equipGuid then
            Fluent:Notify({Title = "Error", Content = "No hero/weapon equipped! Please equip first.", Duration = 3})
            spinning3 = false
            break
        end

        local result = RandomHeroEquipGrade:InvokeServer({{drawId=currentDrawId, guid=equipGuid}})
        if result and result.data and result.data.grade then
            local quirkId = result.data.grade
            local quirkName = EquipQuirkNames[quirkId]
            if quirkName then
                Fluent:Notify({Title="Roll Result", Content="Got grade: "..quirkName.." (ID: "..tostring(quirkId)..")", Duration=2})
                if tableHasValue(desiredWeaponQuirks3, quirkId) then
                    Fluent:Notify({Title="Success", Content="üéØ Found desired grade: "..quirkName, Duration=3})
                    spinning3 = false
                    break
                end
            end
        end
        task.wait(spinDelay3)
    end
end

    -- ===== Slot 1 Tab =====
    local Tab1 = Window:AddTab({ Title = "Weapon Quirk Spinner 1", Icon = "swords" })
    for label,id in pairs(weaponQuirksList1) do
        local check = Tab1:AddToggle(label,{Title=label,Default=false})
        check:OnChanged(function(state)
            if state then table.insert(desiredWeaponQuirks1,id)
            else for i,v in ipairs(desiredWeaponQuirks1) do if v==id then table.remove(desiredWeaponQuirks1,i) break end end end
        end)
    end
    Tab1:AddSlider("SpinSpeed1",{Title="Spin Speed (Slot 1)",Description="Delay between rerolls",Default=spinDelay1,Min=0.01,Max=1,Rounding=2,Callback=function(v) spinDelay1=v end})
    Tab1:AddButton({Title="Start Rolling (Slot 1)", Description="Begin rolling", Callback=function() if spinning1 then return end; spinning1=true; task.spawn(spinLoop1); Fluent:Notify({Title="Started (Slot 1)", Content="Weapon auto roll started for slot 1!", Duration=3}) end})
    Tab1:AddButton({Title="Stop Rolling (Slot 1)", Description="Stop rolling", Callback=function() spinning1=false; Fluent:Notify({Title="Stopped (Slot 1)", Content="Weapon auto roll stopped for slot 1!", Duration=3}) end})

    -- ===== Slot 2 Tab =====
    local Tab2 = Window:AddTab({ Title = "Weapon Quirk Spinner 2", Icon = "swords" })
    for label,id in pairs(weaponQuirksList2) do
        local check = Tab2:AddToggle(label,{Title=label,Default=false})
        check:OnChanged(function(state)
            if state then table.insert(desiredWeaponQuirks2,id)
            else for i,v in ipairs(desiredWeaponQuirks2) do if v==id then table.remove(desiredWeaponQuirks2,i) break end end end
        end)
    end
    Tab2:AddSlider("SpinSpeed2",{Title="Spin Speed (Slot 2)",Description="Delay between rerolls",Default=spinDelay2,Min=0.01,Max=1,Rounding=2,Callback=function(v) spinDelay2=v end})
    Tab2:AddButton({Title="Start Rolling (Slot 2)", Description="Begin rolling", Callback=function() if spinning2 then return end; spinning2=true; task.spawn(spinLoop2); Fluent:Notify({Title="Started (Slot 2)", Content="Weapon auto roll started for slot 2!", Duration=3}) end})
    Tab2:AddButton({Title="Stop Rolling (Slot 2)", Description="Stop rolling", Callback=function() spinning2=false; Fluent:Notify({Title="Stopped (Slot 2)", Content="Weapon auto roll stopped for slot 2!", Duration=3}) end})

    -- ===== Equip Weapon Spin Tab =====
    local Tab3 = Window:AddTab({ Title = "Equip Weapon Spin", Icon = "swords" })

    local function refreshEquipToggles()
        -- Clear old toggles
        for _,tog in ipairs(spinToggles) do
            Tab3:Remove(tog) -- remove previous toggle from UI
        end
        spinToggles = {}
        desiredWeaponQuirks3 = {} -- reset selection

        -- Add new toggles for current DrawId
        for id, grade in pairs(drawTables[currentDrawId]) do
            local check = Tab3:AddToggle(grade,{Title=grade,Default=false})
            check:OnChanged(function(state)
                if state then table.insert(desiredWeaponQuirks3,id)
                else for i,v in ipairs(desiredWeaponQuirks3) do if v==id then table.remove(desiredWeaponQuirks3,i) break end end end
            end)
            table.insert(spinToggles,check)
        end
    end

    Tab3:AddDropdown("Select Spin", {
        Title="Select Spin",
        Default="Spin 1",
        Options={"Spin 1","Spin 2","Spin 3"},
        Callback=function(option)
            if option=="Spin 1" then currentDrawId=980001
            elseif option=="Spin 2" then currentDrawId=980002
            elseif option=="Spin 3" then currentDrawId=980003
            end
            EquipQuirkNames = drawTables[currentDrawId]
            refreshEquipToggles()
            Fluent:Notify({Title="Draw Selected", Content="Now using "..option, Duration=2})
        end
    })

    -- Initialize toggles for default spin
    refreshEquipToggles()

    Tab3:AddSlider("SpinSpeed3",{Title="Spin Speed", Description="Delay between rerolls", Default=spinDelay3, Min=0.01, Max=1, Rounding=2, Callback=function(v) spinDelay3=v end})
    Tab3:AddButton({Title="Start Rolling", Description="Begin rolling", Callback=function() if spinning3 then return end; spinning3=true; task.spawn(spinLoop3); Fluent:Notify({Title="Started", Content="EquipWeapon auto roll started!", Duration=3}) end})
    Tab3:AddButton({Title="Stop Rolling", Description="Stop rolling", Callback=function() spinning3=false; Fluent:Notify({Title="Stopped", Content="EquipWeapon auto roll stopped!", Duration=3}) end})
end

-- ===========================
-- Save Manager
-- ===========================
SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({})
InterfaceManager:SetFolder("FluentScriptHub")
SaveManager:SetFolder("FluentScriptHub/Bladeslayer")
InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)
Window:SelectTab(1)
SaveManager:LoadAutoloadConfig()
