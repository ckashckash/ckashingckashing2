--// Services
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Remotes = ReplicatedStorage:WaitForChild("Remotes")
local EquipHeroEquip = Remotes:WaitForChild("EquipHeroEquip")
local RandomHeroEquipGrade = Remotes:WaitForChild("RandomHeroEquipGrade")
local StarterGui = game:GetService("StarterGui")

--// Capture the last equipped guid
local lastGuid = nil
EquipHeroEquip.OnClientEvent:Connect(function(data)
    if typeof(data) == "table" and data.guid then
        lastGuid = data.guid
        print("‚úÖ Captured last guid:", lastGuid)
    end
end)

--// Grade map
local gradeMap = {
    [990006] = "S",
    [990007] = "SS",
    [990008] = "G",
    [990009] = "N",
    [990010] = "M",
}

--// Spin function
local function spinOnce()
    if not lastGuid then
        warn("‚ùå No guid captured yet. Equip a weapon first!")
        return
    end

    local args = {
        {
            drawId = 980001,
            guid = lastGuid
        }
    }

    local success, result = pcall(function()
        return RandomHeroEquipGrade:InvokeServer(unpack(args))
    end)

    if success and typeof(result) == "table" then
        local gradeId = result.grade
        local gradeName = gradeMap[gradeId] or ("Unknown grade: " .. tostring(gradeId))

        print("üé≤ Spin result:", gradeName)

        -- Show notification
        StarterGui:SetCore("SendNotification", {
            Title = "Spin Result",
            Text = "You got: " .. gradeName,
            Duration = 5
        })
    else
        warn("‚ùå Spin failed:", result)
    end
end

--// Run one test spin automatically
wait(2)
spinOnce()
